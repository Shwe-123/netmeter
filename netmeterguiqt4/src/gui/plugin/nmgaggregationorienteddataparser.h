/***************************************************************************
 *   Copyright (C) 2007 by Eduard Bellot                                   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#ifndef NMGAGGREGATIONORIENTEDDATAPARSER_H
#define NMGAGGREGATIONORIENTEDDATAPARSER_H

#include "nmgdataparser.h"

/**
 * \brief NMGAggregationOrientedDataParser is an aggregation oriented data parser. 
 * 
 * This parser reads test files that contain data came from Netperf generator. Netperf is a 
 * program that generates network traffic to evaluate network throughput performance.
 * The result of this traffic are aggregated values expressing that performance.
 * The way to use this parser is to create a derived class that decides which treatment do with 
 * the aggregated values information. This derived class must define the virtual method 
 * doProcess() called when aggregated values has been read. Is in that point when the programer 
 * can obtain the values information and the associated test source/destination information in 
 * terms of source/destination address and port. After doProcess(), aggregated and test 
 * information are not available anymore.
 * If an error occures while parsing, parsing process is stopped and the kind of error that 
 * occurred is returned.
 */
class NMGAggregationOrientedDataParser : public NMGDataParser
{
 
  public:

    /** \brief Default constructor */
    NMGAggregationOrientedDataParser();

    /** \brief Default destructor */
    virtual ~NMGAggregationOrientedDataParser() {}

    /**
     * \brief Allows to know if data information has been completely read by parser
     * \return True if data has been read or false if not
     */
    bool isDataRead() const;

    /**
     * \brief Starts the parsing process.
     * 
     * Parsing process can be aborted due to errors in the parsed file or to errors generated
     * in doProcess() method. Parse errors can be:
     * <i>The expected result section was not found</i> and <i>No data found in this file</i>. 
     * Errors generated by doProcess(), if any, shoud be defined by the class which implements
     * this method.
     * 
     * \param device File to be parsed.
     * \return False when an error ocurred during parsing.
     */
    bool read(QIODevice* device);

    /**
     * \brief Returns the source address, usually as IP format, of the performance test.
     * \return Source address or empty string if associated information to aggregated values has
     * not been parsed yet.
     */
    inline QString getSourceAddress() const { return sourceAddress; }

    /**
     * \brief Returns the destination address, usually as IP format, of the performance test.
     * \return Destination address or empty string if associated information to aggregated values 
     * has not been parsed yet.
     */
    inline QString getDestinationAddress() const { return destinationAddress; }

    /**
     * \brief Returns the socket size of the receiver host involved in the performance test.
     * \return Socket size in bytes or -1 if data has not been parsed yet.
     */
    inline int getReceivingSocketSizeInBytes() const { return rss; }

    /**
     * \brief Returns the socket size of the sender host involved in the performance test.
     * \return Socket size in bytes or -1 if data has not been parsed yet.
     */
    inline int getSendingSocketSizeInBytes() const { return sss; }

    /**
     * \brief Returns the numbers of messages sent by the sender host involved in the performance 
     * test.
     * \return Number of messages or -1 if data has not been parsed yet.
     */
    inline int getSendingMessagesSizeInBytes() const { return sms; }

    /**
     * \brief Returns the time length of the perfomance test.
     * \return Time in seconds or -1.0 if data has not been parsed yet.
     */
    inline double getElapsedTimeInSeconds() const { return time; }

    /**
     * \brief Returns the aggregated value of performance, throughput, of the sender host. 
     * 
     * This value is only defined when the perfomance test is done with UDP packets transmission
     * patterns.
     *
     * \return Throughput in kilobits per second or -1.0 if data has not been parsed yet.
     */
    inline double getSendingThroughputInKBitsPerSecond() const { return tputSent; }

    /**
     * \brief Returns the aggregated value of performance, throughput, of the receiver host. 
     * 
     * This value is defined when the performance test is indistinctly done with UDP/TCP packets 
     * transmission patterns.
     *
     * \return Throughput in kilobits per second or -1.0 if data has not been parsed yet.
     */
    inline double getReceivingThroughputInKBitsPerSecond() const { return tputRecv; }

    /**
     * \brief Returns the number of correct messages sent by sender host.
     *
     * This value is only defined when the perfomance test is done with UDP packets transmission
     * patterns.
     *
     * \return Number of correct messages or -1 if data has not been parsed yet.
     */
    inline int getSendingOkMessages() const { return okMsgSent; }

    /**
     * \brief Returns the number of incorrect messages sent by sender host.
     *
     * This value is only defined when the perfomance test is done with UDP packets transmission
     * patterns.
     *
     * \return Number of incorrect messages or -1 if data has not been parsed yet.
     */
    inline int getSendingKoMessages() const { return koMsgSent; }

    /**
     * \brief Returns the number of correct messages received by receiver host.
     *
     * This value is only defined when the perfomance test is done with UDP packets transmission
     * patterns.
     *
     * \return Number of correct messages or -1 if data has not been parsed yet.
     */
    inline int getReceivingOkMessages() const { return okMsgRecv; }

    /**
     * \brief Returns the pattern used in the perfomance test, TCP or UDP.
     * \return Protocol used or empty string if data has not been parsed yet.
     */
    inline QString getTypeOfProtocol() const { return typeOfProtocol; }

    /**
     * \brief Stops the parsing process. Current aggregate information reaches an undefined 
     * state.
     */
    void stop();

    /**
     * \brief Allows to know aproximately the current percent of read file.
     * \return Percent between 0 and 100.
     */
    int getCompletedPercent() const;

    /**
     * \brief Allows to know the current parsing state.
     * 
     * The possible states are: <i>Parser initialized</i>, <i>Reading data</i> and 
     * <i>Data read</i>.
     *
     * \return Current parsing state
     */
    QString getStatus() const;

  protected:

    /**
     * \brief Method to be implemented for a derived class.
     *
     * Derived class must define this method to get information of test and enable additional 
     * actions to be done with this information.
     */
    virtual void doProcess() = 0;

  private:

    void readResult();
    void readTCP();
    void readUDP();
    void readSourceAddress();
    void readDestinationAddress();
    void readRSS();
    void readSSS();
    void readSMS();
    void readTime();
    void readSentThroughput();
    void readRecvThroughput();
    void readSentMsgOK();
    void readSentMsgKO();
    void readRecvMsgOK();
    void readUnknownElement();

    bool isResultSectionRead;
    bool isResultSectionEmpty;
	
    bool stopParsing;
    int completedPercent;
    QString status;

  protected:

    QString sourceAddress; /**< Source address of sender host in test. */
    QString destinationAddress; /**< Destination address of receiver host in test. */
    int rss; /**< Receiving socket size. */
    int sss; /**< Sending socket size. */
    int sms; /**< Sending messages size. */
    double time; /**< Elapsed time for test. */
    double tputSent; /**< Throughput for sender host. */
    double tputRecv; /**< Throughput for receiver host. */
    int okMsgSent; /**< Number of correct messages sent. */
    int koMsgSent; /**< Number of incorrect messages sent. */
    int okMsgRecv; /**< Number of correct messages received. */

    QString typeOfProtocol; /**< Protocol pattern for test. */

};

#endif
