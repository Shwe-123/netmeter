/***************************************************************************
 *   Copyright (C) 2007 by Eduard Bellot                                   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#ifndef NMGPACKETORIENTEDDATAPARSER_H
#define NMGPACKETORIENTEDDATAPARSER_H

#include "nmgdataparser.h"

/**
 * \brief NMGPacketOrientedDataParser is a packet oriented data parser. 
 * 
 * This parser reads test files that contain data came from Mgen generator. Mgen is a program 
 * that generates network traffic in different generation patterns.
 * The result of this traffic are sequences of packets grouped into flows. Each packet contains 
 * information related to its identification into the flow, its transmission and reception time, 
 * and its size. Furthermore, each flow has its own identifier and it contains information 
 * related to its origin and destination in terms of source/destination address and port.
 * NMGPacketOrientedDataParser has been designed considering that, in general, packet oriented
 * test files can be huge in size. This restriction is important because parser can not saves all
 * read data in memory. Is for this reason that parser don't save more information that the
 * current read packet.
 * The way to use this parser is to create a derived class that decides which treatment do with 
 * the current packet information. This derived class must define the virtual method doProcess()
 * called each time that a new packet is read. Is in that point when the programer can obtain 
 * the packet information and the associated flow information containing current packet. After
 * doProcess(), packet information and occasionally flow information will be replaced by the next
 * packet into the same or another flow. Additionally the programer can implement the virtual
 * method doWhenFlowFinished() to apply, if any, some extra treatment. This method is called 
 * each time a flow has been read.
 * If an error occures while parsing, parsing process is stopped and the kind of error that 
 * occurred is returned.
 */
class NMGPacketOrientedDataParser : public NMGDataParser
{

  public:

    /** \brief Default constructor. */
    NMGPacketOrientedDataParser();

    /** \brief Default destructor. */
    virtual ~NMGPacketOrientedDataParser() {}

    /**
     * \brief Allows to know if data information has been completely read by parser
     * \return True if data has been read or false if not
     */
    bool isDataRead() const;

    /**
     * \brief Starts the parsing process.
     *
     * Parsing process can be aborted due to errors in the parsed file or to errors generated
     * in doProcess() method. Parse errors can be:
     * <i>The expected result section was not found</i>, <i>The XML file has an incomplete 
     * sequence element</i> and <i>No data found in this file</i>. Errors generated by 
     * doProcess(), if any, shoud be defined by the class which implements this method.
     *
     * \param device File to be parsed.
     * \return False when an error ocurred during parsing.
     */
    bool read(QIODevice* device);

    /**
     * \brief Returns the identifier of the current parsed flow.
     * \return Flow identifier or -1 if any flow has been parsed yet.
     */
    inline int getFlowIdentifier() const { return flowId; }

    /**
     * \brief Returns the source address, usually as IP format, of the current parsed flow.
     * \return Flow source address or empty string if any flow has been parsed yet.
     */
    inline QString getSourceAddress() const { return sourceAddress; }
 
    /**
     * \brief Returns the source port of the current parsed flow.
     * \return Flow source port or -1 if any flow has been parsed yet.
     */
    inline int getSourcePort() const { return sourcePort; }

    /**
     * \brief Returns the destination address, usually as IP format, of the current parsed flow.
     * \return Flow destination address or empty string if any flow has been parsed yet.
     */
    inline QString getDestinationAddress() const { return destinationAddress; }

    /**
     * \brief Returns the destination port of the current parsed flow.
     * \return Flow destination port or -1 if any flow has been parsed yet.
     */
    inline int getDestinationPort() const { return destinationPort; }

    /**
     * \brief Returns the packet identifier from the sequence of packets of the current parsed 
     * flow.
     * \return Packet identifier or -1 if any packet has been parsed yet.
     */
    inline int getSequenceIdentifier() const { return seqId; }

    /**
     * \brief Returns the packet transmission time of the current parsed packet in hh:mm:ss.msec
     * format.
     * \return Packet transmission time or an empty string if any packet has been parsed yet.
     */
    inline QString getTxTime() const { return txTime; }

    /**
     * \brief Returns the packet reception time of the current parsed packet in hh:mm:ss.msec
     * format.
     * \return Packet reception time or an empty string if any packet has been parsed yet.
     */
    inline QString getRxTime() const { return rxTime; }

    /**
     * \brief Returns the packet size of the current parsed packet.
     * \return Packet size in bytes or an -1 if any packet has been parsed yet.
     */
    inline int getPacketSizeInBytes() const { return packetSize; }

    /**
     * \brief Stops the parsing process. Current packet information reaches an undefined state.
     */
    void stop();

    /**
     * \brief Allows to know aproximately the current percent of read file.
     * \return Percent between 0 and 100.
     */
    int getCompletedPercent() const;

    /**
     * \brief Allows to know the current parsing state.
     * 
     * The possible states are: <i>Parser initialized</i>, <i>Reading data</i> and 
     * <i>Data read</i>.
     * 
     * \return Current parsing state
     */
    QString getStatus() const;

  protected:

    /**
     * \brief Method to be implemented for a derived class.
     *
     * Derived class must define this method to get information of current parsed packet and
     * enable more complicated process with single or grouped packets.
     */
    virtual void doProcess() = 0;

    /**
     * \brief Method to be implemented for a derived class.
     *
     * This method is used to do additional treatments. It is called each time a flow has been
     * read.
     */
    virtual void doWhenFlowFinished() = 0;

  private:

    void readResult();
    void readFlows();
    void readFlow();
    void readFlowSourceInformation();
    void readFlowDestinationInformation();

    void readSequenceInFlow();
    void readSourceAddress();
    void readSourcePort();
    void readDestinationAddress();
    void readDestinationPort();
    void readSequenceTxTime();
    void readSequenceRxTime();
    void readSequencePacketSize();
    void readUnknownElement();

    bool isResultSectionRead;
    bool isResultSectionEmpty;
	
    bool stopParsing;
    long long int fileSize;
    QString status;


  protected:

    int flowId; /**< Flow identifier of a current parsed flow. */
    QString sourceAddress; /**< Source address of a current parsed flow. */
    int sourcePort; /**< Source port of a current parsed flow. */
    QString destinationAddress; /**< Destination address of a current parsed flow. */
    int destinationPort; /**< Destination port of a current parsed flow. */

    int seqId; /**< Packet identifier into a sequence of packets of a current parsed flow. */
    QString txTime; /**< Packet transmission time of a current parsed packet. */
    QString rxTime; /**< Packet reception time of a current parsed packet. */
    int packetSize; /**< Packet size of a current parsed packet. */

};

#endif
